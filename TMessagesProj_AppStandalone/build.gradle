import com.android.build.gradle.ProguardFiles

plugins{
    id libs.plugins.secrets.gradle
    id libs.plugins.android.application
}

dependencies {
    implementation project(':TMessagesProj')
    implementation files('../TMessagesProj/libs/libgsaverification-client.aar')
}

ext.abiCodes = ['universal': 0, 'armeabi-v7a': 1, 'arm64-v8a': 5, x86: 2, x86_64: 6]

def getProps(String propName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return ""
    }
}

android {
    namespace = 'org.telegram.messenger.regular'
    defaultConfig.applicationId = APP_PACKAGE

    packagingOptions {
        resources {
            excludes += '**'
        }
    }

    Properties signingProperties = new Properties()

    String signFilePath = getProps("sign.file")
    Boolean dontObfuscate = getProps("app.dontobfuscate")?.toBoolean() ?: false

    if (signFilePath) {
        File signFile = new File(signFilePath)

        if (signFile.exists()) {
            signingProperties.load(signFile.newDataInputStream())
        } else {
            throw new FileNotFoundException("Signing file not found at path: $signFilePath")
        }
    }

    signingConfigs {
        if (signingProperties.size() > 0) {
            sign {
                storeFile file(signingProperties.getProperty("keyPath"))
                storePassword signingProperties.getProperty("storePassword")
                keyAlias signingProperties.getProperty("keyAlias")
                keyPassword signingProperties.getProperty("keyPassword")
            }
        }
    }

    buildTypes {
        debug {
            if (signingProperties.size() > 0) {
                signingConfig = signingConfigs.sign
            }
            jniDebuggable true
            minifyEnabled = false
            shrinkResources = false
            multiDexEnabled = true
            applicationIdSuffix ".beta"
        }

        pbeta {
            minifyEnabled = !dontObfuscate
            shrinkResources = !dontObfuscate
            vcsInfo.include = false
            if (signingProperties.size() > 0) {
                signingConfig = signingConfigs.sign
            }
            jniDebuggable = true
            proguardFiles(
                    getDefaultProguardFile(ProguardFiles.ProguardFile.OPTIMIZE.fileName),
                    '../TMessagesProj/proguard-rules.pro'
            )
            ndk.debugSymbolLevel = 'FULL'
        }

        release {
            minifyEnabled = !dontObfuscate
            shrinkResources = !dontObfuscate
            vcsInfo.include = false
            if (signingProperties.size() > 0) {
                signingConfig = signingConfigs.sign
            }
            proguardFiles(
                    getDefaultProguardFile(ProguardFiles.ProguardFile.OPTIMIZE.fileName),
                    '../TMessagesProj/proguard-rules.pro'
            )
            ndk.debugSymbolLevel = 'FULL'
        }
    }

    defaultConfig.versionCode = Integer.parseInt(APP_VERSION_CODE)

    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            def abi = output.getFilter('ABI')
            if (abi == null) abi = 'universal'
            outputFileName = "OctoGram-Standalone-${defaultConfig.versionName}-${defaultConfig.versionCode}-${abi}.apk"
            def abiVersionCode = project.ext.abiCodes.get(abi)
            if (abiVersionCode == null) abiVersionCode = 0
            output.versionCodeOverride = defaultConfig.versionCode * 10 + abiVersionCode
        }
    }

    defaultConfig {
        versionName APP_VERSION_NAME

        multiDexEnabled = true
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    splits.abi {
        enable = true
        universalApk = true

        reset()
        include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
    }

    dependenciesInfo.includeInApk = false
}