plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.google.services)
    alias(libs.plugins.secrets.gradle.plugin)
}

dependencies {
    implementation project(':TMessagesProj')
    implementation files('../TMessagesProj/libs/libgsaverification-client.aar')
}

ext.abiCodes = ['universal': 0, 'armeabi-v7a': 1, 'arm64-v8a': 5, x86: 2, x86_64: 6]

def getProps(String propName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return "";
    }
}

android {
    namespace = 'org.telegram.messenger.regular'
    defaultConfig.applicationId = APP_PACKAGE

    packagingOptions {
        resources {
            excludes += '**'
        }
    }

    Properties signingProperties = new Properties()

    String signFilePath = getProps("sign.file")

    if (signFilePath) {
        File signFile = new File(signFilePath)

        if (signFile.exists()) {
            signingProperties.load(signFile.newDataInputStream())
        } else {
            throw new FileNotFoundException("Signing file not found at path: $signFilePath")
        }
    }

    signingConfigs {
        if (signingProperties.size() > 0) {
            sign {
                storeFile file(signingProperties.getProperty("keyPath"))
                storePassword signingProperties.getProperty("storePassword")
                keyAlias signingProperties.getProperty("keyAlias")
                keyPassword signingProperties.getProperty("keyPassword")
            }
        }
    }

    buildTypes {
        debug {
            if (signingProperties.size() > 0) {
                signingConfig = signingConfigs.sign
            }
            jniDebuggable true
            minifyEnabled = false
            shrinkResources = false
            multiDexEnabled = true
            applicationIdSuffix ".beta"
        }

        pbeta {
            minifyEnabled = true
            shrinkResources = true
            vcsInfo.include = false
            if (signingProperties.size() > 0) {
                signingConfig = signingConfigs.sign
            }
            jniDebuggable = true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
        }

        release {
            minifyEnabled = true
            shrinkResources = true
            vcsInfo.include = false
            if (signingProperties.size() > 0) {
                signingConfig = signingConfigs.sign
            }
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
        }
    }

    defaultConfig.versionCode = Integer.parseInt(APP_VERSION_CODE)

    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            def abi = output.getFilter('ABI')
            if (abi == null) abi = 'universal'
            outputFileName = "OctoGram-${defaultConfig.versionName}-${defaultConfig.versionCode}-${abi}.apk"
            def abiVersionCode = project.ext.abiCodes.get(abi)
            if (abiVersionCode == null) abiVersionCode = 0
            output.versionCodeOverride = defaultConfig.versionCode * 10 + abiVersionCode
        }
    }

    defaultConfig {
        versionName APP_VERSION_NAME

        multiDexEnabled = true
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    splits.abi {
        enable = true
        universalApk = true

        reset()
        include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
    }

    dependenciesInfo.includeInApk = false
}

def updateProperty(String key, Closure<String> transformer) {
    def propertiesFile = project.rootProject.file("gradle.properties")
    if (!propertiesFile.exists()) {
        throw new GradleException("gradle.properties not found at ${propertiesFile.absolutePath}")
    }

    def lines = propertiesFile.readLines()
    def newLines = []
    def updated = false
    def keyFound = false

    for (line in lines) {
        def equalsIndex = line.indexOf('=')

        if (equalsIndex != -1 && line.substring(0, equalsIndex).trim() == key) {
            keyFound = true
            def valuePart = line.substring(equalsIndex + 1)
            def oldValue = valuePart.trim()

            def newValue = transformer(oldValue)

            if (oldValue != newValue) {
                logger.lifecycle("Property '$key' updated: '$oldValue' â†’ '$newValue'")
                newLines << line.substring(0, equalsIndex + 1) + newValue
                updated = true
            } else {
                logger.info("Property '$key' value '$oldValue' did not change after transformation.")
                newLines << line
            }
        } else {
            newLines << line
        }
    }

    if (!keyFound) {
        logger.warn("Property '$key' not found in gradle.properties. No update attempted.")
    } else if (updated) {
        propertiesFile.text = newLines.join('\n')
    } else {
        logger.lifecycle("Property '$key' found, but value did not change.")
    }
}

tasks.register('buildStable') {
    group = "build"
    description = "Builds the release APK and AAB."
    dependsOn("assembleRelease")
    dependsOn("bundlePlay")
}

tasks.register('markAsBeta') {
    group = "versioning"
    description = "Appends ' Beta' to the APP_VERSION_NAME in gradle.properties if not already present."
    doLast {
        updateProperty("APP_VERSION_NAME") { value ->
            value.endsWith(" Beta") ? value : "$value Beta"
        }
    }
}

tasks.register('unmarkBeta') {
    group = "versioning"
    description = "Removes ' Beta' from the APP_VERSION_NAME in gradle.properties if present."
    doLast {
        updateProperty("APP_VERSION_NAME") { value ->
            value.endsWith(" Beta") ? value[0..-6] : value
        }
    }
}

tasks.register('bumpVersionCode') {
    group = "versioning"
    description = "Increments the APP_VERSION_CODE in gradle.properties by a configurable amount (default 5)."

    def incrementBy = project.hasProperty('increment') ? project.property('increment').toString().toInteger() : 5
    logger.info("Incrementing version code by $incrementBy")

    doLast {
        updateProperty("APP_VERSION_CODE") { value ->
            try {
                (value.toInteger() + incrementBy).toString()
            } catch (NumberFormatException e) {
                throw new GradleException("APP_VERSION_CODE '$value' in gradle.properties is not a valid integer.", e)
            }
        }
    }
}