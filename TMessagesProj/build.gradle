plugins {
    id 'com.android.library'
}

configurations.configureEach {
    exclude group: 'com.google.firebase', module: 'firebase-core'
    exclude group: 'androidx.recyclerview', module: 'recyclerview'
}

def command(String... command) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine command
        standardOutput = stdout
    }
    return stdout.toString().trim().substring(0, 8)
}

def getCCacheExecutable = {
    def osName = System.getProperty('os.name', "generic").toLowerCase()
    if (osName.contains('mac')) {
        osName = 'mac'
    } else if (osName.contains('windows')) {
        osName = 'windows'
    } else {
        osName = 'linux'
    }
    def executableFile = osName.contains('windows') ? 'ccache.exe' : 'ccache'

    def ccachePath = null
    if (!osName.contains('windows')) {
        def process = ['which', 'ccache'].execute()
        process.waitFor()
        if (process.exitValue() == 0) {
            def stdout = new ByteArrayOutputStream()
            process = ['which', 'ccache'].execute()
            process.waitForProcessOutput(stdout, null)
            ccachePath = stdout.toString().trim()
        }
    }

    if (ccachePath == null) {
        ccachePath = new File(System.getProperty('user.dir'), "Tools/ccache/${osName}/$executableFile").toString()
    }

    return new File(ccachePath)
}

dependencies {
    implementation 'androidx.core:core:1.9.0'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.3'
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "androidx.sharetarget:sharetarget:1.2.0"

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly 'org.checkerframework:checker-qual:3.32.0'
    compileOnly 'org.checkerframework:checker-compat-qual:2.5.5'

    // Firebase dependencies
    implementation 'com.google.firebase:firebase-messaging:23.1.2'
    implementation 'com.google.firebase:firebase-appindexing:20.0.0'

    // Google Play Services dependencies
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation 'com.google.android.gms:play-services-auth:20.5.0'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.android.gms:play-services-wearable:18.0.0'
    implementation 'com.google.android.gms:play-services-location:21.0.1'

    implementation 'com.googlecode.mp4parser:isoparser:1.0.6'
    implementation 'com.stripe:stripe-android:2.0.2'
    implementation 'com.google.mlkit:language-id:17.0.4'
    implementation 'com.android.billingclient:billing:5.2.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation ('com.google.guava:guava:31.1-android') {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
        exclude group: 'org.checkerframework', module: 'checker-compat-qual'
        exclude group: 'org.checkerframework', module: 'checker-qual'
        exclude group: 'com.google.errorprone', module: 'error_prone_annotations'
        exclude group: 'com.google.j2objc', module: 'j2objc-annotations'
        exclude group: 'org.codehaus.mojo', module: 'animal-sniffer-annotations'
    }

    // CameraX Implementation
    implementation 'androidx.camera:camera-camera2:1.3.0-alpha07'
    implementation 'androidx.camera:camera-core:1.3.0-alpha07'
    implementation 'androidx.camera:camera-extensions:1.3.0-alpha07'
    implementation 'androidx.camera:camera-lifecycle:1.3.0-alpha07'
    implementation 'androidx.camera:camera-view:1.3.0-alpha07'
    implementation 'androidx.camera:camera-video:1.3.0-alpha7'
    implementation 'androidx.interpolator:interpolator:1.0.0'

    // GOOGLE PLAY UPDATE CHECKER
    implementation 'com.google.android.play:core:1.10.3'

    // NATIVE LIBS
    implementation 'com.getkeepsafe.relinker:relinker:1.4.5'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'
}

android {
    namespace 'org.telegram.messenger'

    ndkVersion "23.2.8568313"

    sourceSets.main.jniLibs.srcDirs = ['./jni/']

    externalNativeBuild {
        cmake {
            path 'jni/CMakeLists.txt'
        }
    }

    buildTypes {
        debug {
            resValue "string", "BuildAppName", "@string/AppNameBeta"
        }
        release {
            resValue "string", "BuildAppName", "@string/AppName"
        }
    }

    lint {
        checkReleaseBuilds false
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        disable 'BlockedPrivateApi'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11

        coreLibraryDesugaringEnabled true
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33

        def gitHash = command('git', 'rev-parse', '--short', 'HEAD')
        def gitDate = command('git', 'show', '-s', '--format=%ct')

        buildConfigField("String", "GIT_COMMIT_HASH", "\"${gitHash}\"")
        buildConfigField("Long", "GIT_COMMIT_DATE", "${gitDate}L")
        buildConfigField("int", "BUILD_VERSION", "${APP_VERSION_CODE}")
        buildConfigField("String", "BUILD_VERSION_STRING", "\"${APP_VERSION_NAME}\"")

        externalNativeBuild {
            cmake {
                version '3.10.2'
                arguments '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-21'
                var file = getCCacheExecutable()
                if (file.exists()) {
                    println("Using ccache ${file.getAbsolutePath()}")
                    arguments += "-DANDROID_CCACHE=${file.getAbsolutePath()}"
                } else {
                    throw new Exception("ccache not found")
                }
            }
        }
    }

    buildFeatures.buildConfig = true
}
