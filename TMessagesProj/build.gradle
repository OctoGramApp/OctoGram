import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'com.android.library'
}

repositories {
    mavenCentral()
    google()
}

configurations.configureEach {
    exclude group: 'com.google.firebase', module: 'firebase-core'
    exclude group: 'androidx.recyclerview', module: 'recyclerview'
}

def command(String... command) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine command
        standardOutput = stdout
    }
    return stdout.toString().trim().substring(0, 8)
}

def isWindows = String.valueOf(DefaultNativePlatform.currentOperatingSystem.toFamilyName() == OperatingSystemFamily.WINDOWS)
def isMacOs = String.valueOf(DefaultNativePlatform.currentOperatingSystem.toFamilyName() == OperatingSystemFamily.MACOS)

def getCCacheExecutable = {
    def path = (isWindows) ? 'windows' : (isMacOs) ? 'macOs' : 'linux'
    def executableFile = "ccache" + (isWindows ? ".exe" : "")

    def ccachePath = null
    if (!isWindows) {
        def process = ['which', 'ccache'].execute()
        process.waitFor()
        if (process.exitValue() == 0) {
            def stdout = new ByteArrayOutputStream()
            process = ['which', 'ccache'].execute()
            process.waitForProcessOutput(stdout, null)
            ccachePath = stdout.toString().trim()
        }
    }

    if (ccachePath == null) {
        ccachePath = new File(System.getProperty('user.dir'), "Tools/ccache/$path/$executableFile").toString()
    }

    return new File(ccachePath)
}

dependencies {
    /* Android */
    implementation 'androidx.core:core:1.9.0'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.3'
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "androidx.sharetarget:sharetarget:1.2.0"

    compileOnly 'org.checkerframework:checker-qual:2.5.2'
    compileOnly 'org.checkerframework:checker-compat-qual:2.5.0'

    /* Firebase */
    implementation 'com.google.firebase:firebase-messaging:22.0.0'
    implementation 'com.google.firebase:firebase-config:21.0.1'
    implementation 'com.google.firebase:firebase-datatransport:18.1.0'
    implementation 'com.google.firebase:firebase-appindexing:20.0.0'

    /* Google Services */
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation 'com.google.android.gms:play-services-auth:20.4.0'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.android.gms:play-services-wearable:18.0.0'
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    implementation 'com.google.android.gms:play-services-wallet:19.1.0'
    implementation 'com.google.android.gms:play-services-safetynet:18.0.1'

    /* Other */
    implementation 'com.googlecode.mp4parser:isoparser:1.0.6'
    implementation 'com.stripe:stripe-android:2.0.2'
    implementation 'com.google.mlkit:language-id:16.1.1'
    implementation 'com.android.billingclient:billing:5.1.0'
    implementation 'com.google.code.gson:gson:2.10'
    implementation 'com.google.guava:guava:31.1-android'
}

android {
    namespace 'org.telegram.messenger'

    sourceSets.main.jniLibs.srcDirs = ['./jni/']

    buildFeatures {
        prefab true
    }

    externalNativeBuild {
        cmake {
            path 'jni/CMakeLists.txt'
        }
    }

    buildTypes {
        debug {
            resValue "string", "BuildAppName", "@string/AppNameBeta"
            buildConfigField "boolean", "DEBUG_VERSION", "true"
        }
        release {
            resValue "string", "BuildAppName", "@string/AppName"
            buildConfigField "boolean", "DEBUG_VERSION", "false"
        }
    }

    defaultConfig {
        def gitHash = command('git', 'rev-parse', '--short', 'HEAD')
        def gitDate = command('git', 'show', '-s', '--format=%ct')

        /*OctoGram*/
        buildConfigField "String", "OCTO_VERSION", "\"${OCTO_VERSION}\""
        buildConfigField "String", "GIT_COMMIT_HASH", "\"${gitHash}\""
        buildConfigField "Long", "GIT_COMMIT_DATE", "${gitDate}L"

        buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "false"
        buildConfigField "int", "BUILD_VERSION", "${APP_VERSION_CODE}"
        buildConfigField "String", "BUILD_VERSION_STRING", "\"${APP_VERSION_NAME}\""
        buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", "${isWindows}"

        externalNativeBuild {
            cmake {
                version '3.10.2'
                arguments '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-21'
                var file = getCCacheExecutable()
                if (file.exists()) {
                    println("Using ccache ${file.getAbsolutePath()}")
                    arguments += "-DANDROID_CCACHE=${file.getAbsolutePath()}"
                } else {
                    throw new Exception("ccache not found")
                }
            }
        }
    }
}

