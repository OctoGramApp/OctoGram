import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

import java.nio.file.Paths

plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.kotlin.android)
}

configurations.configureEach {
    exclude group: 'com.google.firebase', module: 'firebase-core'
    exclude group: 'androidx.recyclerview', module: 'recyclerview'
}

def getGitHash = {
    return providers.exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
    }.standardOutput.asText.get().trim().substring(0, 8)
}

def getGitDate = { ->
    return providers.exec {
        commandLine 'git', 'show', '-s', '--format=%ct'
    }.standardOutput.asText.get().trim()
}

def getGitRepoUrl = { ->
    return providers.exec {
        commandLine 'git', 'remote', 'get-url', 'origin'
    }.standardOutput.asText.get().trim()
}

def getGitBranch = {
    return providers.exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
    }.standardOutput.asText.get().replace("feature/", "").trim()
}

def getVersionPBetaName = { ->
    def version_name = APP_VERSION_NAME.split(" ")[0]
    return version_name + " #" + getGitBranch()
}

def isWindows = DefaultNativePlatform.currentOperatingSystem.toFamilyName() == OperatingSystemFamily.WINDOWS
def isMacOs = DefaultNativePlatform.currentOperatingSystem.toFamilyName() == OperatingSystemFamily.MACOS

def getCCacheExecutable = {
    def pathName
    if (isWindows) {
        pathName = "windows"
    } else {
        // Check if ccache is installed
        def ccCacheRes = providers.exec {
            commandLine 'which', 'ccache'
        }
        if (ccCacheRes.standardOutput.asText.getOrElse("").isBlank()) {
            throw new GradleException("Command 'which' failed or command not found.")
        }
        if (ccCacheRes.result.get().exitValue == 0) {
            return Paths.get(ccCacheRes.standardOutput.asText.get().trim()).toFile()
        }
        if (isMacOs) {
            pathName = "macOs"
        } else {
            pathName = "linux"
        }
    }
    def executableFile = "ccache"
    if (isWindows) {
        executableFile += ".exe"
    }
    // Build the path to the local ccache executable
    return Paths.get(System.getProperty("user.dir"), "Tools", "ccache", pathName, executableFile).toFile()
}

dependencies {
    // AndroidX dependencies
    implementation libs.androidx.fragment
    implementation libs.androidx.core
    implementation libs.androidx.palette
    implementation libs.androidx.exifinterface
    implementation libs.androidx.dynamicanimation
    implementation libs.androidx.sharetarget
    implementation libs.androidx.interpolator
    implementation libs.androidx.biometric
    implementation libs.androidx.cardview
    implementation libs.androidx.browser

    // Google Play Integrity
    implementation libs.google.play.integrity
    implementation libs.androidx.recyclerview

    compileOnly libs.findbugs.jsr305
    compileOnly libs.checker.qual
    compileOnly libs.checker.compat.qual

    // Firebase dependencies
    implementation libs.firebase.messaging
    implementation libs.firebase.config
    implementation libs.firebase.datatransport
    implementation libs.firebase.appindexing

    // Google Play Services dependencies
    implementation libs.play.services.maps
    implementation libs.play.services.auth
    implementation libs.play.services.vision
    implementation libs.play.services.wearable
    implementation libs.play.services.location
    implementation libs.play.services.wallet
    implementation libs.play.services.safetynet

    implementation libs.mp4parser.isoparser
    implementation(libs.stripe.android) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    implementation libs.mlkit.language.id
    implementation libs.billing
    implementation libs.commons.text
    implementation libs.gson
    implementation (libs.guava) {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
        exclude group: 'org.checkerframework', module: 'checker-compat-qual'
        exclude group: 'org.checkerframework', module: 'checker-qual'
        exclude group: 'com.google.errorprone', module: 'error_prone_annotations'
        exclude group: 'com.google.j2objc', module: 'j2objc-annotations'
        exclude group: 'org.codehaus.mojo', module: 'animal-sniffer-annotations'
    }

    // CameraX Implementation
    implementation libs.camera.camera2
    implementation libs.camera.core
    implementation libs.camera.extensions
    implementation libs.camera.lifecycle
    implementation libs.camera.view
    implementation libs.camera.video
    implementation libs.androidx.interpolator
    implementation libs.androidx.biometric

    // GOOGLE PLAY UPDATE CHECKER
    //implementation 'com.google.android.play:core:1.10.3'

    // NATIVE LIBS
    implementation libs.relinker

    implementation libs.play.services.mlkit.subject.segmentation
    implementation libs.play.services.mlkit.image.labeling

    // Kotlin dependencies
    implementation(libs.kotlin.stdlib) {
        because("kotlin-stdlib-jdk7 and kotlin-stdlib-jdk8 are now integrated into kotlin-stdlib")
    }

    /*constraints {
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.0") {
            because("kotlin-stdlib-jdk7 is now a part of kotlin-stdlib")
        }
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0") {
            because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
        }
    }*/
}

android {
    namespace = 'org.telegram.messenger'

    sourceSets.main.jniLibs.srcDirs = ['./jni/']

    externalNativeBuild {
        cmake {
            path 'jni/CMakeLists.txt'
        }
    }

    buildTypes {
        debug {
            resValue "string", "BuildAppName", "@string/AppNameBeta"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "true"
            buildConfigField "String", "BUILD_VERSION_STRING", "\"${getVersionPBetaName()}\""
        }

        pbeta {
            resValue "string", "BuildAppName", "@string/AppNameBeta"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "true"
            buildConfigField "String", "BUILD_VERSION_STRING", "\"${getVersionPBetaName()}\""
        }

        release {
            resValue "string", "BuildAppName", "@string/AppName"
        }
    }

    defaultConfig {
        buildConfigField "String", "GIT_COMMIT_HASH", "\"${getGitHash()}\""
        buildConfigField "Long", "GIT_COMMIT_DATE", "${getGitDate()}L"
        buildConfigField "String", "GIT_REPO_URL", "\"${getGitRepoUrl()}\""
        buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "false"
        buildConfigField "int", "BUILD_VERSION", "${APP_VERSION_CODE}"
        buildConfigField "String", "BUILD_VERSION_STRING", "\"${APP_VERSION_NAME}\""
        buildConfigField "int", "TELEGRAM_BUILD_VERSION", "${TELEGRAM_VERSION_CODE}"
        buildConfigField "String", "TELEGRAM_VERSION_STRING", "\"${TELEGRAM_VERSION_NAME}\""
        buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", "${isWindows}"

        externalNativeBuild {
            cmake {
                version = '3.10.2'
                arguments '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-21', '-DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON'
                var file = getCCacheExecutable()
                if (file.exists()) {
                    print("Using ccache ${file.getAbsolutePath()}")
                    arguments += "-DANDROID_CCACHE=${file.getAbsolutePath()}"
                } else {
                    throw new FileNotFoundException("ccache not found")
                }
            }
        }
        vectorDrawables {
            generatedDensities = ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi']
            useSupportLibrary = true
        }
    }
}


/*def getProps(String propName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return "";
    }
}
apply plugin: 'com.google.gms.google-services'

task checkVisibility {
    doFirst {
        def isPrivateBuild = project.gradle.startParameter.taskNames.find {
            it.contains("HA_private") || it.contains("HA_hardcore") || it.contains("Debug") || it.contains("Release")
        }
        def isPublicAllowed = !project.hasProperty("IS_PRIVATE") || !project.property("IS_PRIVATE").toBoolean()
        if (!isPrivateBuild && !isPublicAllowed) {
            throw new GradleException("Building public version of private code!")
        }
    }
    doLast {
        if (project.gradle.startParameter.taskNames.find { it.contains("HA_public") }) {
            def privateBuild = file("${projectDir}_AppHockeyApp/afat/HA_private/app.apk")
            if (privateBuild.exists()) {
                privateBuild.delete()
            }
        }
    }
}

preBuild.dependsOn checkVisibility
*/